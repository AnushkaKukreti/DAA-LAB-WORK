1.

#include <iostream>
#include <vector>

using namespace std;

vector<int> merge(vector<int> left, vector<int> right, int *comp, int *inv) {
    vector<int> merged(left.size() + right.size());
    int i, j, k;
    for (i = 0, j = 0, k = 0; i < left.size() && j < right.size();) {
        if (left[i] < right[j]) {
            merged[k++] = left[i++];
        } else {
            merged[k++] = right[j++];
            (*inv) = (*inv) + left.size() - i;
        }
        (*comp)++;
    }
    while (i < left.size()) merged[k++] = left[i++];
    while (j < right.size()) merged[k++] = right[j++];
    return merged;
}

vector<int> merge_sort(vector<int> v, int *comp, int *inv) {

    cerr << "vector of size: " << v.size() << "\n";

    if (v.size() == 1) {
        cerr << "one: " << v[0] << "\n";
        return v;
    }

    int mid = v.size() / 2;
    cerr << "mid: " << mid << "\n"
         << "1: " << mid << " 2: " << (v.size() - mid) << "\n";

    vector<int> left(mid);
    vector<int> right(v.size() - mid);

    for (int i = 0; i < mid; i++) left[i] = v[i];
    for (int i = mid; i < v.size(); i++) right[i - mid] = v[i];

    vector<int> left2 = merge_sort(left, comp, inv);
    vector<int> right2 = merge_sort(right, comp, inv);

    cerr << "left2: ";
    for (int i = 0; i < left2.size(); i++) cerr << left2[i] << " ";
    cerr << "\nright2: ";
    for (int i = 0; i < right2.size(); i++) cerr << right2[i] << " ";
    cerr << "\n";

    vector<int> ans = merge(left2, right2, comp, inv);
    cerr << "merge: ";
    for (int i = 0; i < ans.size(); i++) cerr << ans[i] << " ";
    cerr << "\n";
    return ans;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        int comparisions=0, inversions=0;
        vector<int> sarr = merge_sort(arr, &comparisions, &inversions);
        for (int i = 0; i < sarr.size(); i++) {
            cout << sarr[i] << " ";
        }
        cout << "\n";
        cout << "comparisions = " << comparisions << "\n";
        cout << "inversions = " << inversions << "\n";
    }
    return 0;
}

2.

#include <iostream>
#include <vector>

using namespace std;

int partition(vector<int> &arr, int start, int end, int &comp, int &swap) {
    int pivot = arr[end]; // end element is pivot
    int i = start - 1;    // right postiton of pivot
    for (int j = start; j < end; j++) {
        if (++comp && arr[j] < pivot) {
            i++;
            swap++;
            int temp = arr[j];
            arr[j] = arr[i];
            arr[i] = temp;
        }
    }
    if (i + 1 != end) {
        swap++;
        int temp = arr[i + 1];
        arr[i + 1] = arr[end];
        arr[end] = temp;
    }
    return i + 1;
}

// random pivot
int partition_r(vector<int> &arr, int l, int r, int &comp, int &swap) {
    srand(time(NULL));
    int random = l + rand() % (r - l);
    swap++;
    int temp = arr[random];
    arr[random] = arr[r];
    arr[r] = temp;

    return partition(arr, l, r, comp, swap);
}

/* quick sort algorithm */

void quick_sort(vector<int> &arr, int start, int end, int &comp, int &swap) {
    if (start < end) {
        int pivot = partition_r(arr, start, end, comp, swap);
        quick_sort(arr, start, pivot - 1, comp, swap);
        quick_sort(arr, pivot + 1, end, comp, swap);
    }
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        int comparisions = 0, swaps = 0;
        quick_sort(arr, 0, arr.size() - 1, comparisions, swaps);
        for (int i = 0; i < arr.size(); i++) cout << arr[i] << " ";
        cout << "\n";
        cout << "comparisions: " << comparisions << "\n";
        cout << "swaps: " << swaps;
        cout << "\n";
    }

    return 0;
}

3.

#include <iostream>
#include <limits.h>
#include <vector>

using namespace std;

// partition form the end
int partitionSmall(int arr[], int l, int r) {
    int x = arr[r], i = l;
    for (int j = l; j <= r - 1; j++) {
        if (arr[j] <= x) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
        }
    }

    int temp = arr[i];
    arr[i] = arr[r];
    arr[r] = temp;
    return i;
}

/* quick select algortihm for smallest k */
int quickSelectSmall(int arr[], int l, int r, int k) {
    if (k > 0 && k <= r - l + 1) {
        // partition the array around the last element
        int index = partitionSmall(arr, l, r);

        // if index is same as k
        if (index - l == k - 1) {
            return arr[index];
        }

        // if index is more, recurse for left, else right
        if (index - l > k - 1) {
            return quickSelectSmall(arr, l, index - 1, k);
        } else {
            return quickSelectSmall(arr, index + 1, r, k - index + l - 1);
        }
    }
    return INT_MIN;
}

// partition form the end
int partitionLarge(int arr[], int l, int r) {
    int x = arr[r], i = l;
    for (int j = l; j <= r - 1; j++) {
        if (arr[j] >= x) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
        }
    }

    int temp = arr[i];
    arr[i] = arr[r];
    arr[r] = temp;

    return i;
}

/* quick select algorithm for largest k */
int quickSelectLarge(int arr[], int l, int r, int k) {
    if (k > 0 && k <= r - l + 1) {
        // partition the array around the last element
        int index = partitionLarge(arr, l, r);

        // if index is same as k
        if (index - l == k - 1) {
            return arr[index];
        }

        // if index is more, recurse for left, else right
        if (index - l > k - 1) {
            return quickSelectLarge(arr, l, index - 1, k);
        } else {
            return quickSelectLarge(arr, index + 1, r, k - index + l - 1);
        }
    }
    return INT_MAX;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        int k;
        cin >> k;

        // find the kth smallest and largest element
        if (k > n) {
            cerr << "Invalid input\n";
            continue;
        }
        int smallk = quickSelectSmall(arr, 0, n - 1, k);
        int largek = quickSelectLarge(arr, 0, n - 1, k);
        cout << smallk << "\n"
             << largek << "\n";
    }
    return 0;
}
