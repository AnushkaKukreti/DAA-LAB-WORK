
Prob 1.

#include <bits/stdc++.h>
using namespace std;

/**
 * Given an unsorted array containing duplicate elements,
 * find element with maximum occurrences and print it
 * Complexities: Time - O(N), Space - O(N).
*/

void solve() {
 int n;
 cin >> n;
 char arr[n];
 int count[26] = {0};
 for (int i = 0; i < n; i++) {
 cin >> arr[i];
 count[arr[i] - 'a']++;
 }
 char ch;
 int count_ch = 1;
 for (int i = 0; i < 26; i++) {
 if (count[i] > count_ch) {
 ch = (char)(i + 'a');
 count_ch = count[i];
 }
 }
 if (count_ch == 1) {
 cout << "No duplicates present\n";
 } else {
 cout << ch << " " << count_ch;
 }
}

int main() {
 int testCase;
 cin >> testCase;
 while (testCase--) {
 solve();
 }
 return 0;
}




Prob 2.

/**
 * Everything is theoretically impossible until it is done.
*/
#include <bits/stdc++.h>
using namespace std;

using ll = long long;

void merge(int arr[], int l, int mid, int r) {
 int i, j, k;
 int size1 = mid - l + 1;
 int size2 = r - mid;

 int left[size1], right[size2];

 for (i = 0; i < size1; i++)
 left[i] = arr[l + i];
 for (j = 0; j < size2; j++)
 right[j] = arr[mid + 1 + j];

 i = j = 0;
 k = l;

 while (i < size1 and j < size2) {
 if (left[i] <= right[j])
 arr[k++] = left[i++];
 else
 arr[k++] = right[j++];
 }

 while (i < size1)
 arr[k++] = left[i++];
 while (j < size2)
 arr[k++] = right[j++];
}

void mergeSort(int arr[], int l, int r) {
 if (l >= r)
 return;
 int mid = l + (r - l) / 2;
 mergeSort(arr, l, mid);
 mergeSort(arr, mid + 1, r);
 merge(arr, l, mid, r);
}

int main() {
 ios::sync_with_stdio(false);
 cin.tie(NULL), cout.tie(NULL);

 int testCases;
 cin >> testCases;

 while (testCases--) {
 // Solving every tescase here.
 int n;
 cin >> n;
 int arr[n];
 for (int i = 0; i < n; i++)
 cin >> arr[i];
 int sum;
 cin >> sum;
 mergeSort(arr, 0, n - 1);

 bool flag = false;
 int left_ptr = 0, right_ptr = n - 1;
 while (left_ptr <= right_ptr) {
 int sum_ptrs = arr[left_ptr] + arr[right_ptr];
 if (sum_ptrs > sum)
 right_ptr--;
 else if (sum_ptrs < sum)
 left_ptr++;
 else {
 flag = true;
 cout << "{ " << arr[left_ptr] << " , " << arr[right_ptr] << " } ";
 left_ptr++;
 right_ptr--;
 }
 }
 if (!flag)
 cout << "No such pair exist\n";
 else
 cout << "\n";
 }
 return 0;
}





Prob 3.

/**
 * Everything is theoretically impossible until it is done.
*/
#include <bits/stdc++.h>
using namespace std;

using ll = long long;

int main() {
 ios::sync_with_stdio(false);
 cin.tie(NULL), cout.tie(NULL);

 int n1, n2;
 cin >> n1;
 int arr1[n1];
 for (int i = 0; i < n1; i++)
 cin >> arr1[i];
 cin >> n2;
 int arr2[n2];
 for (int i = 0; i < n2; i++)
 cin >> arr2[i];

 int ptr1 = 0, ptr2 = 0;
 int ans_ptr = 0;
 int final_size = (n1 > n2) ? n1 : n2;
 int ans_arr[final_size];
 while (ptr1 < n1 and ptr2 < n2) {
 if (arr1[ptr1] == arr2[ptr2]) {
 ans_arr[ans_ptr++] = arr1[ptr1++];
 ptr2++;
 } else if (arr1[ptr1] < arr2[ptr2]) {
 ptr1++;
 } else {
 ptr2++;
 }
 }

 for (int i = 0; i < ans_ptr; i++) {
 cout << ans_arr[i] << " ";
 }
 cout << endl;
 return 0;
}
